# import Organisation, User, ROLE, Patient, PatientCreateInput, PatientUpdateInput, PatientWhereInput, PatientWhereUniqueInput,  PatientOrderByInput, Room, RoomCreateInput, RoomWhereInput, RoomOrderByInput from "./generated/prisma.graphql"

type Query {
  info: String!
  allOrganisations: [Organisation!]!
  organisation: Organisation
  allUsers: [User!]!
  getUser: User!
  allPatients(where: PatientWhereInput): [Patient!]!
  patient(where: PatientWhereUniqueInput): Patient!
  patientFeed(
    where: PatientWhereInput
    orderBy: PatientOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PatientFeed!
  roomFeed(
    where: RoomWhereInput
    orderBy: RoomOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RoomFeed
}

type Mutation {
  signup(
    email: String!
    password: String!
    name: String!
    role: ROLE!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  changeUserRole(id: ID!, role: ROLE!): User!
  addOrgToUser(orgId: ID!, userId: ID!): User!
  removeOrgFromUser(orgId: ID!, userId: ID!): User!
  createPatient(data: PatientCreateInput!): Patient
  updatePatient(
    data: PatientUpdateInput
    where: PatientWhereUniqueInput
  ): Patient!
  createRoom(data: RoomCreateInput): Room
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  role: ROLE!
  organisations: [Organisation!]!
}

type PatientFeed {
  patients: [Patient!]!
  count: Int!
}

type RoomFeed {
  rooms: [Room!]!
  count: Int!
}
